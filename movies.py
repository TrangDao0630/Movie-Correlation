# -*- coding: utf-8 -*-
"""movies.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QKMvKcFOEgWkbiQCX9wI8HMq433cbVpg
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import matplotlib
plt.style.use('ggplot')
from matplotlib.pyplot import figure

# %matplotlib inline
matplotlib.rcParams['figure.figsize'] = (12,8)


# Now we need to read in the data
df = pd.read_csv('/content/sample_data/movies.csv')

df.head()

#Let's see if there is any missing data
for col in df.columns:
  pct_missing = np.mean(df[col].isnull())
  print('{} - {}%'.format(col, pct_missing))

#Data types for our columns
df.dtypes

#Change data type pf columns
df['budget'] = df['budget'].fillna(0).astype('int64') # Fill missing values with 0
df['gross'] = df['gross'].fillna(0).astype('int64') # Fill missing values with 0

df

#Create correct Year Column
df['yearcorrect'] = df['released'].str.extract(r'(\d{4})')
df

df = df.sort_values(by=['gross'], inplace=False, ascending=False)

pd.set_option('display.max_rows', None)

#Drop any duplicates
df['company'].drop_duplicates().sort_values(ascending=False)

df

#Budget high correlation
#Company high correlation

#Scatter plot with nudget vs gross
plt.scatter(x=df['budget'], y=df['gross'])
plt.title('Budget vs Gross Earnings')
plt.xlabel('Gross Earnings')
plt.ylabel('Budget for Film')
plt.show()

df.head()

#Plot budget bs gross using seaborn
sns.regplot(x='budget', y='gross', data=df, scatter_kws={'color':'red'}, line_kws={'color':'blue'})

#Let's start looking at correlation

# Select only the numeric columns for correlation calculation

numerical_df = df.select_dtypes(include=['float', 'int'])

# Calculate the correlation matrix

correlation_matrix = numerical_df.corr(method='pearson') #pearson,kendall, spearman

print(correlation_matrix)

numerical_df = df.select_dtypes(include=['float', 'int'])

# Calculate the correlation matrix
correlation_matrix = numerical_df.corr(method='kendall') #pearson,kendall, spearman

print(correlation_matrix)

numerical_df = df.select_dtypes(include=['float', 'int'])

# Calculate the correlation matrix
correlation_matrix = numerical_df.corr(method='spearman') #pearson,kendall, spearman

print(correlation_matrix)

# Select only the numeric columns for correlation calculation
numerical_df = df.select_dtypes(include=['float', 'int'])

# Calculate the correlation matrix
correlation_matrix = numerical_df.corr()

sns.heatmap(correlation_matrix, annot = True)

plt.title("Correlation matrix for Numeric Features")

plt.xlabel("Movie features")

plt.ylabel("Movie features")

plt.show()

#Look at company
df.head()

df.apply(lambda x: x.factorize()[0]).corr(method='pearson')

correlation_matrix = df.apply(lambda x: x.factorize()[0]).corr(method='pearson')

sns.heatmap(correlation_matrix, annot = True)

plt.title("Correlation matrix for Movies")

plt.xlabel("Movie features")

plt.ylabel("Movie features")

plt.show()

correlation_mat = df.apply(lambda x: x.factorize()[0]).corr()

corr_pairs = correlation_mat.unstack()

print(corr_pairs)

sort_pairs = corr_pairs.sort_values(kind="quicksort")

print(sort_pairs)

sorted_pairs = sort_pairs[(sort_pairs) > 0.5]

print(sorted_pairs)

